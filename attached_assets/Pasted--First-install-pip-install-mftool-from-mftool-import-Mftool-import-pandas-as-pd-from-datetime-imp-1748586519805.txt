# First install: pip install mftool

from mftool import Mftool
import pandas as pd
from datetime import datetime, timedelta

class MFToolDataFetcher:
    """
    Alternative fetcher using mftool library
    """
    
    def __init__(self):
        self.mf = Mftool()
    
    def get_all_scheme_codes(self):
        """Get all available scheme codes"""
        try:
            return self.mf.get_scheme_codes()
        except Exception as e:
            print(f"Error getting scheme codes: {e}")
            return None
    
    def get_scheme_details(self, scheme_code):
        """Get basic scheme details"""
        try:
            return self.mf.get_scheme_details(scheme_code)
        except Exception as e:
            print(f"Error getting scheme details for {scheme_code}: {e}")
            return None
    
    def get_scheme_historical_nav(self, scheme_code):
        """Get complete historical NAV data"""
        try:
            return self.mf.get_scheme_historical_nav(scheme_code)
        except Exception as e:
            print(f"Error getting historical NAV for {scheme_code}: {e}")
            return None
    
    def get_scheme_historical_nav_for_dates(self, scheme_code, start_date, end_date):
        """
        Get historical NAV for specific date range
        Date format: 'DD-MM-YYYY'
        """
        try:
            return self.mf.get_scheme_historical_nav_for_dates(scheme_code, start_date, end_date)
        except Exception as e:
            print(f"Error getting historical NAV for dates: {e}")
            return None
    
    def search_schemes_by_name(self, search_term):
        """Search for schemes by name in scheme codes"""
        all_codes = self.get_all_scheme_codes()
        if not all_codes:
            return []
        
        matching_schemes = []
        search_term_lower = search_term.lower()
        
        for code, name in all_codes.items():
            if search_term_lower in name.lower():
                matching_schemes.append({
                    'scheme_code': code,
                    'scheme_name': name
                })
        
        return matching_schemes
    
    def convert_historical_to_dataframe(self, historical_data):
        """Convert historical NAV data to DataFrame"""
        if not historical_data or 'data' not in historical_data:
            return None
        
        df = pd.DataFrame(historical_data['data'])
        df['date'] = pd.to_datetime(df['date'], format='%d-%m-%Y')
        df['nav'] = pd.to_numeric(df['nav'])
        df = df.sort_values('date')
        df.reset_index(drop=True, inplace=True)
        
        # Add metadata
        meta = historical_data.get('meta', {})
        df['scheme_name'] = meta.get('scheme_name', '')
        df['fund_house'] = meta.get('fund_house', '')
        df['scheme_type'] = meta.get('scheme_type', '')
        
        return df

# Example usage
def mftool_example():
    """Example usage of MFTool fetcher"""
    
    fetcher = MFToolDataFetcher()
    
    # 1. Search for schemes
    print("=== Searching for SBI schemes ===")
    sbi_schemes = fetcher.search_schemes_by_name("SBI")
    print(f"Found {len(sbi_schemes)} SBI schemes")
    
    if sbi_schemes:
        for scheme in sbi_schemes[:5]:  # Show first 5
            print(f"- {scheme['scheme_name']} (Code: {scheme['scheme_code']})")
    
    # 2. Get historical data for a scheme
    print("\n=== Getting historical data ===")
    if sbi_schemes:
        scheme_code = sbi_schemes[0]['scheme_code']
        historical_data = fetcher.get_scheme_historical_nav(scheme_code)
        
        if historical_data:
            print(f"Scheme: {historical_data['meta']['scheme_name']}")
            print(f"Records: {len(historical_data['data'])}")
            
            # Convert to DataFrame
            df = fetcher.convert_historical_to_dataframe(historical_data)
            if df is not None:
                print(f"DataFrame shape: {df.shape}")
                print("\nRecent NAV data:")
                print(df.tail())
    
    # 3. Get data for specific date range
    print("\n=== Getting data for specific date range ===")
    if sbi_schemes:
        scheme_code = sbi_schemes[0]['scheme_code']
        date_range_data = fetcher.get_scheme_historical_nav_for_dates(
            scheme_code, 
            "01-01-2024", 
            "31-12-2024"
        )
        
        if date_range_data:
            df_range = fetcher.convert_historical_to_dataframe(date_range_data)
            if df_range is not None:
                print(f"Data for 2024: {len(df_range)} records")
                print(df_range.head())

if __name__ == "__main__":
    mftool_example()